apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        applicationId "com.udacity.gradle.builditbigger"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
        free {
            applicationIdSuffix 'free'
        }
        paid {
            applicationIdSuffix 'paid'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.google.code.findbugs:jsr305:2.0.1'
    compile 'com.google.api-client:google-api-client:1.23.0'
    compile 'com.google.http-client:google-http-client-android:1.23.0'
    compile 'com.android.support.test.espresso:espresso-idling-resource:2.2.2'
    compile project(path: ':backend', configuration: 'android-endpoints')
    compile project(':jokepresenterlib')

    freeCompile 'com.google.android.gms:play-services-ads:11.0.4'

    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    androidTestCompile 'com.android.support.test.espresso:espresso-idling-resource:2.2.2'
}

/*
    Test task that -
    1. Launches the GCE local development server
    2. Runs all tests
    3. Shuts the server down again
 */
class AppEngineRun extends DefaultTask {
    public String projectDir;
    @TaskAction
    void doAction() {
        int endIndex = projectDir.lastIndexOf("/");
        String rootGradleDir = projectDir.substring(0, endIndex)
        def processBuilder = new ProcessBuilder('./gradlew', ':backend:appengineRun')
        processBuilder.directory(new File(rootGradleDir))
        processBuilder.start()
    }
}
task runBackendAppEngine(type: AppEngineRun) {
    projectDir = getProjectDir().getAbsolutePath()
}
task instrumentedAndroidTest(dependsOn: 'connectedAndroidTest')
task stopBackendAppEngine(dependsOn: 'instrumentedAndroidTest')
task runInstrumentedAndroidtests {
    dependsOn = ['runBackendAppEngine', 'instrumentedAndroidTest', 'stopBackendAppEngine']
    doLast {
        println("All Tests Completed!!!")
    }
}
instrumentedAndroidTest.mustRunAfter 'runBackendAppEngine'
stopBackendAppEngine.mustRunAfter 'instrumentedAndroidTest'